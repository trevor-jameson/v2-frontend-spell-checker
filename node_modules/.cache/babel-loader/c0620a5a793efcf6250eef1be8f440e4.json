{"ast":null,"code":"import { setAuthenticatedUser } from '../redux/actionCreators';\nimport { boundDispatch } from '../redux/store';\nexport default class Adapter {\n  static get(endpoint) {\n    const headers = { ...this.REQUEST_CONFIG.HEADERS\n    };\n    headers.Authorization = window.localStorage.getItem('jwt');\n    return fetch(this.BACKEND_URL + endpoint, {\n      headers\n    });\n  }\n\n  static post(endpoint, body) {\n    // Destructuring headers object to prevent accidental mutation\n    const headers = { ...this.REQUEST_CONFIG.HEADERS\n    }; // Add jwt token to request, if not logging in or signing up\n\n    if (endpoint !== 'login' && endpoint !== 'signup') {\n      headers.Authorization = window.localStorage.getItem('jwt');\n    }\n\n    return fetch(this.BACKEND_URL + endpoint, {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify(body)\n    });\n  }\n\n  static submitLoginOrSignup(e, endpoint, body) {\n    e.preventDefault(); // Destructure object from state ref and nest under required \"user\" key\n\n    this.post(endpoint, {\n      user: { ...body\n      }\n    }).then(res => res.json()).then(res => {\n      // User JWT is set in localStorage to persist through browser session\n      window.localStorage.setItem('jwt', res.jwt); // Note: On page reload, user will have to login to fire userAuth dispatch,\n      // otherwise they'll have JWT but no user data\n\n      boundDispatch(setAuthenticatedUser(res.user));\n      window.location.href = '/spells';\n    }) // TODO: Raise error message to user upon 400 response code\n    .catch(console.log);\n  }\n\n}\nAdapter.BACKEND_URL = 'http://localhost:3001/';\nAdapter.REQUEST_CONFIG = {\n  HEADERS: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n};","map":{"version":3,"sources":["/Users/trey/development/spell-checker/v2-frontend-spell-checker/src/utils/Adapter.js"],"names":["setAuthenticatedUser","boundDispatch","Adapter","get","endpoint","headers","REQUEST_CONFIG","HEADERS","Authorization","window","localStorage","getItem","fetch","BACKEND_URL","post","body","method","JSON","stringify","submitLoginOrSignup","e","preventDefault","user","then","res","json","setItem","jwt","location","href","catch","console","log"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,yBAArC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,eAAe,MAAMC,OAAN,CAAc;AAWzB,SAAOC,GAAP,CAAWC,QAAX,EAAqB;AACjB,UAAMC,OAAO,GAAG,EAAC,GAAG,KAAKC,cAAL,CAAoBC;AAAxB,KAAhB;AACAF,IAAAA,OAAO,CAACG,aAAR,GAAwBC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAxB;AAEA,WAAOC,KAAK,CAAC,KAAKC,WAAL,GAAmBT,QAApB,EAA8B;AACtCC,MAAAA;AADsC,KAA9B,CAAZ;AAGH;;AAED,SAAOS,IAAP,CAAYV,QAAZ,EAAsBW,IAAtB,EAA4B;AAExB;AACA,UAAMV,OAAO,GAAG,EAAC,GAAG,KAAKC,cAAL,CAAoBC;AAAxB,KAAhB,CAHwB,CAKxB;;AACA,QAAKH,QAAQ,KAAK,OAAd,IAA2BA,QAAQ,KAAK,QAA5C,EAAuD;AAACC,MAAAA,OAAO,CAACG,aAAR,GAAwBC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAxB;AAA2D;;AAEnH,WAAOC,KAAK,CAAC,KAAKC,WAAL,GAAmBT,QAApB,EAA8B;AAClCY,MAAAA,MAAM,EAAE,MAD0B;AAElCX,MAAAA,OAAO,EAAEA,OAFyB;AAGlCU,MAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAeH,IAAf;AAH4B,KAA9B,CAAZ;AAMH;;AAED,SAAOI,mBAAP,CAA2BC,CAA3B,EAA8BhB,QAA9B,EAAwCW,IAAxC,EAA8C;AAC1CK,IAAAA,CAAC,CAACC,cAAF,GAD0C,CAG1C;;AACA,SAAKP,IAAL,CAAUV,QAAV,EAAoB;AAAEkB,MAAAA,IAAI,EAAE,EAAC,GAAGP;AAAJ;AAAR,KAApB,EACKQ,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUC,GAAG,IAAI;AACT;AACAf,MAAAA,MAAM,CAACC,YAAP,CAAoBgB,OAApB,CAA4B,KAA5B,EAAmCF,GAAG,CAACG,GAAvC,EAFS,CAGT;AACA;;AACA1B,MAAAA,aAAa,CAACD,oBAAoB,CAACwB,GAAG,CAACF,IAAL,CAArB,CAAb;AACAb,MAAAA,MAAM,CAACmB,QAAP,CAAgBC,IAAhB,GAAsB,SAAtB;AACH,KATL,EAUI;AAVJ,KAWKC,KAXL,CAWWC,OAAO,CAACC,GAXnB;AAYH;;AApDwB;AAAR9B,O,CAEVW,W,GAAc,wB;AAFJX,O,CAIVI,c,GAAiB;AACpBC,EAAAA,OAAO,EAAE;AACL,cAAU,kBADL;AAEL,oBAAgB;AAFX;AADW,C","sourcesContent":["import { setAuthenticatedUser } from '../redux/actionCreators'\nimport { boundDispatch } from '../redux/store'\n\nexport default class Adapter {\n\n    static BACKEND_URL = 'http://localhost:3001/'\n\n    static REQUEST_CONFIG = {\n        HEADERS: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }\n\n    static get(endpoint) {\n        const headers = {...this.REQUEST_CONFIG.HEADERS}\n        headers.Authorization = window.localStorage.getItem('jwt')\n\n        return fetch(this.BACKEND_URL + endpoint, {\n            headers\n        })\n    }\n\n    static post(endpoint, body) {\n\n        // Destructuring headers object to prevent accidental mutation\n        const headers = {...this.REQUEST_CONFIG.HEADERS}\n\n        // Add jwt token to request, if not logging in or signing up\n        if ((endpoint !== 'login') && (endpoint !== 'signup')) {headers.Authorization = window.localStorage.getItem('jwt')}\n\n        return fetch(this.BACKEND_URL + endpoint, {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify(body),\n            }\n        )\n    }\n\n    static submitLoginOrSignup(e, endpoint, body) {\n        e.preventDefault()\n\n        // Destructure object from state ref and nest under required \"user\" key\n        this.post(endpoint, { user: {...body} })\n            .then(res => res.json())\n            .then(res => {\n                // User JWT is set in localStorage to persist through browser session\n                window.localStorage.setItem('jwt', res.jwt)\n                // Note: On page reload, user will have to login to fire userAuth dispatch,\n                // otherwise they'll have JWT but no user data\n                boundDispatch(setAuthenticatedUser(res.user))\n                window.location.href ='/spells'\n            })\n            // TODO: Raise error message to user upon 400 response code\n            .catch(console.log)\n    }\n}"]},"metadata":{},"sourceType":"module"}