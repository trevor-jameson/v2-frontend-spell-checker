{"ast":null,"code":"import _objectSpread from \"/Users/trey/development/spell-checker/v2-frontend-spell-checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nexport default class Adapter {\n  static post(endpoint, body) {\n    // Destructure headers object to prevent accidental mutation\n    const headers = _objectSpread({}, this.REQUEST_CONFIG.HEADERS); // Add jwt token to request, if not logging in or signing up\n\n\n    if (endpoint !== 'login' && endpoint !== 'signup') {\n      headers.jwt = window.localStorage.getItem('jwt');\n    }\n\n    debugger;\n    return fetch(this.BACKEND_URL + endpoint, {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify(body)\n    });\n  }\n\n  static submitLoginOrSignup(e, endpoint, body) {\n    e.preventDefault(); // Destructure object from state ref and nest under required \"user\" key\n\n    console.log(e, endpoint, body);\n    this.post(endpoint, {\n      user: _objectSpread({}, body)\n    }).then(res => res.json()).then(res => {\n      window.localStorage.setItem('jwt', res.jwt); // NOTE: Architectural decision needed on where to store global state\n    }).catch(console.log);\n  }\n\n}\nAdapter.BACKEND_URL = 'http://localhost:3001/';\nAdapter.REQUEST_CONFIG = {\n  HEADERS: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n};","map":{"version":3,"sources":["/Users/trey/development/spell-checker/v2-frontend-spell-checker/src/utils/Adapter.js"],"names":["Adapter","post","endpoint","body","headers","REQUEST_CONFIG","HEADERS","jwt","window","localStorage","getItem","fetch","BACKEND_URL","method","JSON","stringify","submitLoginOrSignup","e","preventDefault","console","log","user","then","res","json","setItem","catch"],"mappings":";AAAA,eAAe,MAAMA,OAAN,CAAc;AAWzB,SAAOC,IAAP,CAAYC,QAAZ,EAAsBC,IAAtB,EAA4B;AAExB;AACA,UAAMC,OAAO,qBAAO,KAAKC,cAAL,CAAoBC,OAA3B,CAAb,CAHwB,CAKxB;;;AACA,QAAKJ,QAAQ,KAAK,OAAd,IAA2BA,QAAQ,KAAK,QAA5C,EAAuD;AAACE,MAAAA,OAAO,CAACG,GAAR,GAAcC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAd;AAAiD;;AACzG;AACA,WAAOC,KAAK,CAAC,KAAKC,WAAL,GAAmBV,QAApB,EAA8B;AAClCW,MAAAA,MAAM,EAAE,MAD0B;AAElCT,MAAAA,OAAO,EAAEA,OAFyB;AAGlCD,MAAAA,IAAI,EAAEW,IAAI,CAACC,SAAL,CAAeZ,IAAf;AAH4B,KAA9B,CAAZ;AAMH;;AAED,SAAOa,mBAAP,CAA2BC,CAA3B,EAA8Bf,QAA9B,EAAwCC,IAAxC,EAA8C;AAC1Cc,IAAAA,CAAC,CAACC,cAAF,GAD0C,CAE1C;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ,EAAef,QAAf,EAAyBC,IAAzB;AACA,SAAKF,IAAL,CAAUC,QAAV,EAAoB;AAAEmB,MAAAA,IAAI,oBAAMlB,IAAN;AAAN,KAApB,EACKmB,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUC,GAAG,IAAI;AACTf,MAAAA,MAAM,CAACC,YAAP,CAAoBgB,OAApB,CAA4B,KAA5B,EAAmCF,GAAG,CAAChB,GAAvC,EADS,CAET;AACH,KALL,EAMKmB,KANL,CAMWP,OAAO,CAACC,GANnB;AAOH;;AAtCwB;AAARpB,O,CAEVY,W,GAAc,wB;AAFJZ,O,CAIVK,c,GAAiB;AACpBC,EAAAA,OAAO,EAAE;AACL,cAAU,kBADL;AAEL,oBAAgB;AAFX;AADW,C","sourcesContent":["export default class Adapter {\n\n    static BACKEND_URL = 'http://localhost:3001/'\n\n    static REQUEST_CONFIG = {\n        HEADERS: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }\n\n    static post(endpoint, body) {\n\n        // Destructure headers object to prevent accidental mutation\n        const headers = {...this.REQUEST_CONFIG.HEADERS}\n\n        // Add jwt token to request, if not logging in or signing up\n        if ((endpoint !== 'login') && (endpoint !== 'signup')) {headers.jwt = window.localStorage.getItem('jwt')}\n        debugger\n        return fetch(this.BACKEND_URL + endpoint, {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify(body),\n            }\n        )\n    }\n\n    static submitLoginOrSignup(e, endpoint, body) {\n        e.preventDefault()\n        // Destructure object from state ref and nest under required \"user\" key\n        console.log(e, endpoint, body)\n        this.post(endpoint, { user: {...body} })\n            .then(res => res.json())\n            .then(res => {\n                window.localStorage.setItem('jwt', res.jwt)\n                // NOTE: Architectural decision needed on where to store global state\n            })\n            .catch(console.log)\n    }\n}"]},"metadata":{},"sourceType":"module"}